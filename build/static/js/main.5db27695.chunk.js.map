{"version":3,"sources":["helper/env/getEnv.js","serviceWorker.js","app/login/components/LoginForm.js","app/login/components/LoginContainer.js","app/register/components/RegisterForm.js","app/register/components/RegisterContainer.js","routes/Paths.js","api/storage/cookies.js","api/index.js","routes/Routes.js","App.js","api/base/test.js","index.js"],"names":["getEnv","name","NAME","toString","console","log","process","Boolean","window","location","hostname","match","LoginForm","props","className","src","alt","type","placeholder","href","LoginContainer","RegisterForm","React","Component","RegisterContainer","Paths","HomePage","Login","Register","Cookies","baseUrl","createApiRequest","a","url","method","data","params","axios","resp","success","response","message","statusText","routes","path","exact","component","tester","ReactDOM","render","renderRoutes","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5db27695.chunk.js","sourcesContent":["export const getEnv = (name) => {\n    const NAME = name.toString()\n    console.log(process)\n    return process.env[`REACT_APP_${NAME}`]\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n\n","import React from 'react';\nimport \"./LoginForm.css\";\nimport { FaEye } from 'react-icons/fa'\n\nconst LoginForm = (props) => {\n  return (\n    <div>\n      <div className=\"form-login\">\n      <div className=\"login-title\">\n        <div className=\"logo\">\n          <img src=\"/logo.png\" alt=\"Logo\"/>\n        </div>\n        <div className=\"login-form-title\">\n          Đăng nhập\n        </div>\n        <div className=\"title-message\">\n          Đăng nhập để vào mạng xã hội <p>WannahBook</p> \n        </div>\n      </div>  \n      <div className=\"login__form__alige\">          \n        <div className=\"wrap-input\">     \n          <div className=\"validate-input\">\n            <input className=\"input\" type=\"text\" name=\"email\" placeholder=\"Email\" />\n          </div>                                 \n        </div>\n        <div className=\"wrap-input\">\n          <div className=\"validate-input\">\n            <input className=\"input\" type=\"text\" name=\"email\" placeholder=\"Mật khẩu\" />\n            {/* <span className=\"btn-show-pass\">\n              \n            </span> */}\n            <FaEye className=\"icon-eye\" />\n          </div>             \n        </div>    \n             \n      </div>    \n      <div className=\"wrap-login-form-btn\">\n        <div className=\"login-form-bgbtn\"></div>\n        <button className=\"login-form-btn\">\n          Đăng ký\n          </button>\n      </div>        \n      <div className=\"text-center\">\n        <span className=\"txt1\">\n          Bạn không có tài khoản?\n        </span>\n\n        <a className=\"txt2\" href=\"/register\">\n          Tạo tài khoản\n        </a>\n      </div>\n    </div>\n    </div>\n  )\n}\nexport default LoginForm;\n","import React from 'react';\nimport './LoginContainer.css';\nimport LoginForm from './LoginForm';\n\n// class LoginContainer extends React.Component {\n//   render() {\n//     return (\n//       <div className=\"login-container\">\n//         <div className=\"login-wrap-content\"></div>       \n//         <LoginForm></LoginForm>\n//       </div>\n//     )\n//   }\n// }\n\nconst LoginContainer = () => {\n  return (\n    <div className=\"login-container\">\n    <div className=\"login-wrap-content\"></div>       \n      <LoginForm></LoginForm>\n    </div>\n  )\n}\n\nexport default LoginContainer; "," import React from 'react';\n import \"./RegisterForm.css\";\n\nclass RegisterForm extends React.Component {\n  render() {\n    return (\n      <div className=\"form\">\n        <div className=\"wrap-right\">\n          <div className=\"title-name\">\n            Chào mừng bạn đến với WannahBook\n                </div>\n          <div className=\"regiter-name\">\n            Tạo tài khoản\n                </div>\n          <div className=\"wrap-name\">\n            <div className=\"name-user first-name\">\n              <input placeholder=\"Họ\" />\n            </div>\n            <div className=\"name-user last-name\">\n              <input placeholder=\"Tên\" />\n            </div>\n          </div>\n          <div className=\"wrap-email\">\n            <div className=\"email\">\n              <input placeholder=\"Email\" />\n              {/* <span>@gmail.com</span> */}\n            </div>\n          </div>\n          <div className=\"message-register\">\n            <i>Bạn có thể sử dụng chữ cái, số và dấu chấm</i>\n          </div>\n          {/* <div className=\"wrap-email\">\n            <div className=\"email\">\n              <input placeholder=\"Địa chỉ\" />\n            </div>\n          </div> */}\n          <div className=\"wrap-name-column\">\n            <div className=\"password\">\n              <input placeholder=\"Mật khẩu\" />\n            </div>\n            <div className=\"message-register-password\">\n              <i>Sử dụng 8 ký tự trở lên và kết hợp chữ cái, chữ số và biểu tượng</i>\n            </div>\n            <div className=\"password\">\n              <input placeholder=\"Xác nhận\" />\n            </div>\n          </div>\n          \n          <div className=\"footer-register\">\n            <div className=\"login\">\n              <a href=\"/login\">Đăng nhập</a>\n            </div>\n            <div className=\"register\">\n              <span>Đăng ký</span>\n            </div>\n          </div>\n        </div>\n        <div className=\"wrap-left\">\n          <div className=\"logo-book\"></div>\n          <div className=\"message\">\n            <p>\n              Hãy tạo một tài khoản để có những trải nghiệm tuyệt vời tại mạng xã hội\n                    </p>\n            <p className=\"name\">WannahBook</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default RegisterForm;\n\n\n\n\n","import React from 'react';\nimport './RegisterContainer.css';\nimport RegisterForm from './RegisterForm';\n\nclass RegisterContainer extends React.Component {\n  render() {\n    return (\n      <div className=\"register-container\">\n        <div className=\"wrap-content\"></div>\n          <RegisterForm></RegisterForm>\n      </div>\n    )\n  }\n}\n\nexport default RegisterContainer; ","\n\nconst Paths = {\n    HomePage: \"/\",\n    Login: \"/login\",\n    Register: \"/register\"\n}\n\nexport default Paths","import { Cookies } from 'react-cookie'\n\nconst cookies = new Cookies()\n\nexport function getCookie(name) {\n    return cookies.get(name) || null\n}\n\nexport function setCookie(name, value, options) {\n    return cookies.set(name, value, options)\n}\n\nexport function removeCookie(name) {\n    return cookies.remove(name)\n}","import {getEnv} from '../helper/env/getEnv'\nimport {getCookie} from './storage/cookies'\nimport axios from 'axios'\nimport {COOKIE_KEY, SESSION_KEY, setSessionStorage} from './storage/sessionStorage'\nimport {logout} from './auth/auth'\nimport Paths from '../routes/Paths'\n// import {message} from 'antd'\n\nconst baseUrl = getEnv(\"BACKEND_URL\")\n\nexport const createApiRequest = async ({ url, method, data, params }) => {\n    try {\n        const { data: resp } = await axios({\n            method,\n            url: `${baseUrl}${url}`,\n            data,\n            params,\n        })\n        console.log(`${baseUrl}`)\n        return {\n            success: true,\n            data: resp,\n        }\n    } catch (e) {\n        const { response } = e\n        const message = response ? response.statusText : e.message || e\n\n        return {\n            success: false,\n            message,\n        }\n    }\n}\n\nexport const createAuthApiRequest = async ({ url, method, data, params, isFormData , props}) => {\n    try {\n        const token = getCookie(COOKIE_KEY.TOKEN)\n        const { data: resp } = await axios({\n            method,\n            url: `${baseUrl}${url}`,\n            data,\n            params,\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                ...isFormData && {'Content-Type': 'multipart/form-data'},\n            }\n        })\n\n        return {\n            success: true,\n            data: resp,\n        }\n    } catch (e) {\n        const { response } = e\n        console.log(e)\n        const errorMessage = response ? response.statusText : e.message || e\n        if (response.status && [401,403].includes(response.status)) {\n            logout()\n            if (props){\n                console.log(props.location)\n                console.log(props.location.search)\n                setSessionStorage(SESSION_KEY.REDIRECT_URL, props.location.pathname + props.location.search)\n            }\n\n            window.location.href = Paths.Login\n        }\n\n        return {\n            success: false,\n            errorMessage,\n        }\n    }\n}\n\nexport const createAuthEncodeApiRequest = async ({ url, method, data, params, isFormData , props, encode}) => {\n    try {\n        const token = getCookie(COOKIE_KEY.TOKEN)\n        const { data: resp } = await axios({\n            method,\n            url: `${baseUrl}${url}`,\n            data,\n            params,\n            headers: {\n                'Authorization': `Bearer ${token}`,\n                'Content-Encoding': encode,\n                ...isFormData && {'Content-Type': 'multipart/form-data'},\n            }\n        })\n\n        return {\n            success: true,\n            data: resp,\n        }\n    } catch (e) {\n        const { response } = e\n        const errorMessage = response ? response.statusText : e.message || e\n        if (response.status && [401,403].includes(response.status)) {\n            logout()\n            if (props){\n                console.log(props.location)\n                console.log(props.location.search)\n                setSessionStorage(SESSION_KEY.REDIRECT_URL, props.location.pathname + props.location.search)\n            }\n\n            window.location.href = Paths.Login\n        } else {\n            // message.error(errorMessage)\n            window.location.href = Paths.HomePage\n        }\n\n        return {\n            success: false,\n            errorMessage,\n        }\n    }\n}\n\n","import LoginContainer from \"../app/login/components/LoginContainer\"\nimport RegisterContainer from \"../app/register/components/RegisterContainer\"\nimport Paths from \"./Paths\"\nimport App from \"../App\"\n\nconst routes = [\n    {\n        path: Paths.HomePage,\n        exact: true,\n        component: App\n    },\n    {\n        path: Paths.Login,\n        exact: true,\n        component: LoginContainer\n    },\n    {\n        path: Paths.Register,\n        exact: true,\n        component: RegisterContainer\n    },\n]\n\nexport default routes","import React from 'react'\nimport LoginContainer from './app/login/components/LoginContainer'\nimport \"./App.css\"\nimport {test} from \"./api/base/test\"\n\nconst App = () => {\n    const tester = async () => {\n        const {data} = await test();\n        console.log(data)   \n    }\n    tester()\n    return (\n        <LoginContainer></LoginContainer> \n    )\n}\n\nexport default App;","import {createApiRequest} from '../index'\n\nexport const test = () => {\n    return createApiRequest({\n        url: '/api', \n        method: 'get'\n    })\n}","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport {renderRoutes} from 'react-router-config'\nimport routes from './routes/Routes'\n\nReactDOM.render(<BrowserRouter>\n{/* kick it all off with the root route */}\n{renderRoutes(routes)}\n</BrowserRouter>, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}